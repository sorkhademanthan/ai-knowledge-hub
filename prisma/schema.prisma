// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // <--- Provider changed to postgresql
  url      = env("DATABASE_URL")
}

// === Enums ===
enum UserRole {
  ADMIN
  USER
}

enum MemberRole {
  OWNER
  EDITOR
  VIEWER
}

enum DocumentType {
  TEXT
  BRAINSTORM
  CODE
  MARKDOWN
}

enum DocumentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
}

enum PlanType {
  FREE
  PRO
  TEAM
  ENTERPRISE
}

// === Models ===

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String?
  emailVerified DateTime?  // ADD THIS - Required by PrismaAdapter
  password      String?    // ADD THIS - Required for CredentialsProvider
  role          UserRole   @default(USER)
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Full-text search index on name and email
  @@index([name, email])
  
  // Fix relationship names to match actual models
  ownerTeams    Team[]             @relation("TeamOwner")
  memberships   TeamMember[]
  documents     Document[]
  comments      Comment[]
  subscription  Subscription?
  
  // NextAuth.js related fields
  accounts      Account[]
  sessions      Session[]
}

// Rename Workspace to Team as per requirements
model Team {
  id          String            @id @default(uuid())
  name        String
  slug        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  ownerId     String
  owner       User              @relation("TeamOwner", fields: [ownerId], references: [id])
  
  documents   Document[]
  members     TeamMember[]

  // Search optimization
  @@index([name, slug])
  @@index([ownerId])
}

model TeamMember {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])
  role        MemberRole
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([userId, teamId])
  @@index([userId])
  @@index([teamId])

  @@map("WorkspaceMember") // Keep existing table name for migration
}

model Document {
  id          String         @id @default(uuid())
  title       String
  content     Json
  summary     String?        // AI-generated summary for search
  type        DocumentType   @default(TEXT)
  status      DocumentStatus @default(DRAFT)
  
  authorId    String
  author      User           @relation(fields: [authorId], references: [id])
  
  teamId      String
  team        Team           @relation(fields: [teamId], references: [id])
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  comments    Comment[]
  embeddings  Embedding[]

  // Full-text search optimization
  @@index([title, summary])
  @@index([authorId, teamId])
  @@index([status, type])
  @@unique([title, teamId])

  @@map("Document") // Keep existing table name
}

// NEW: Embedding model for vector search
model Embedding {
  id          String   @id @default(uuid())
  content     String   // The text content that was embedded
  vector      String   // JSON string of the embedding vector
  metadata    Json?    // Additional metadata (chunk index, etc.)
  
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())

  // Search optimization
  @@index([documentId])
  @@index([content]) // For text-based search fallback
}

model Comment {
  id          String   @id @default(uuid())
  content     String
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  
  documentId  String
  document    Document @relation(fields: [documentId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([authorId])
  @@index([documentId])
  @@index([createdAt]) // For chronological ordering
}

// UPDATED: Enhanced Subscription model
model Subscription {
  id                     String             @id @default(uuid())
  status                 SubscriptionStatus @default(TRIALING)
  planType               PlanType           @default(FREE)
  
  // Stripe integration
  stripeCustomerId       String?            @unique
  stripeSubscriptionId   String?            @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  
  // Plan limits
  documentsLimit         Int?
  aiRequestsLimit        Int?
  storageLimit           BigInt?
  teamMembersLimit       Int?
  
  // Usage tracking
  documentsUsed          Int                @default(0)
  aiRequestsUsed         Int                @default(0)
  storageUsed            BigInt             @default(0)
  
  userId                 String             @unique
  user                   User               @relation(fields: [userId], references: [id])
  
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  // Search and analytics optimization
  @@index([status, planType])
  @@index([stripeCustomerId])
}

// === NextAuth.js models ===
model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}