// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // <--- Provider changed to postgresql
  url      = env("DATABASE_URL")
}

// === Enums ===
enum UserRole {
  ADMIN
  USER
}

enum MemberRole {
  OWNER
  EDITOR
  VIEWER
}

enum DocumentType {
  TEXT
  BRAINSTORM
  CODE
  MARKDOWN
}

enum DocumentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// === Models ===

model User {
  // UUIDs are best for primary keys in PostgreSQL for distributed systems
  id            String     @id @default(uuid())
  email         String     @unique
  name          String?
  role          UserRole   @default(USER)
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  ownerWorkspaces Workspace[]
  memberships   WorkspaceMember[]
  documents     Document[]
  comments      Comment[]
  subscription  Subscription?
  
  // NextAuth.js related fields
  accounts      Account[]
  sessions      Session[]
}

model Workspace {
  id          String            @id @default(uuid())
  name        String
  slug        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  ownerId     String
  owner       User              @relation(fields: [ownerId], references: [id])
  
  documents   Document[]
  members     WorkspaceMember[]

  @@index([ownerId])
}

model WorkspaceMember {
  // Composite primary key
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  role        MemberRole
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([userId, workspaceId])
  @@index([userId])
  @@index([workspaceId])
}

model Document {
  id          String         @id @default(uuid())
  title       String
  content     Json           // PostgreSQL supports Json
  type        DocumentType   @default(TEXT)
  status      DocumentStatus @default(DRAFT)
  
  authorId    String
  author      User           @relation(fields: [authorId], references: [id])
  
  workspaceId String
  workspace   Workspace      @relation(fields: [workspaceId], references: [id])
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  comments    Comment[]

  @@unique([title, workspaceId])
  @@index([authorId])
  @@index([workspaceId])
}

model Comment {
  id          String   @id @default(uuid())
  content     String
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  
  documentId  String
  document    Document @relation(fields: [documentId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([authorId])
  @@index([documentId])
}

model Subscription {
  id               String    @id @default(uuid())
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id])
  
  planType         String
  documentsLimit   Int?
  aiRequestsLimit  Int?
  storageLimit     BigInt?   // BigInt is supported in PostgreSQL
  teamMembersLimit Int?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// === NextAuth.js models ===
model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}